<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>
	<!-- 编写常量 这个访问后缀名可以更改 <constant name="struts.action.extension" value="do,,"></constant> -->
	<!-- 开启动态方法访问 -->
	<constant name="struts.enable.DynamicMethodInvocation" value="true" />
	<!-- 引入其他的配置文件 。。-->
	<!-- <include file="com/qq986945193/davidsshtools/domain/struts_david.xml" /> -->


	<!-- 包结构 name 是包名称。 namespace访问路径。extends继承 -->
	<package name="introduceAction1" namespace="/" extends="struts-default">
		<!--POJO类的方式。。。配置action 默认访问execute方法。(http://localhost/SSHTools/hello.action) -->
		<action name="hello"
			class="com.qq986945193.davidsshtools.action.IntroduceAction1" />
		<!-- 配置一个方法的action -->
		<action name="sayHello"
			class="com.qq986945193.davidsshtools.action.IntroduceAction1" method="sayHello">
			<!-- 这里也可以配置一个跳转的页面。路径的写法：在Struts2框架中，不管是转发还是重定向，都不用写项目名 -->
			<result name="ok">/struts2/jsps/msg.jsp</result>
		</action>
		<!-- 实现Action接口的方式,调用默认的方法execute() -->
		<action name="introduceAction2"
			class="com.qq986945193.davidsshtools.action.IntroduceAction2">
			<result name="login">/struts2/jsps/msg.jsp</result>
		</action>
		<!-- 继承ActionSupport类，调用默认的方法execute() -->
		<action name="introduceAction3"
			class="com.qq986945193.davidsshtools.action.IntroduceAction3" />
	</package>

	<!-- 演示action的访问三种方式，传统方式，通配符方式和动态方式 -->
	<package name="introduceMethod" namespace="/" extends="struts-default">
		<!-- 传统方式 -->
		<action name="save"
			class="com.qq986945193.davidsshtools.action.CustomerAction1" method="save" />
		<action name="delete"
			class="com.qq986945193.davidsshtools.action.CustomerAction1" method="delete" />
		<!-- 通配符方式 -->
		<action name="linkman_*"
			class="com.qq986945193.davidsshtools.action.LinkmanAction1" method="{1}">
			<result name="saveOk">/struts2/jsps/msg.jsp</result>
			<result name="deleteOk">/struts2/jsps/msg.jsp</result>
		</action>
		<!-- 动态访问的方式 -->
		<action name="user" class="com.qq986945193.davidsshtools.action.UserAction1" />
	</package>

	<!-- 配置ssh项目的整合action -->
	<!-- <package name="sshtools" namespace="/" extends="struts-default">
		登陆的action。使用通配符的方式配置
		<action name="user_*" class="com.qq986945193.davidsshtools.action.UserAction"
			method="{1}">
			<result name="success">/index.htm</result>
			<result name="login">/login.htm</result>
		</action>
		配置添加客户的action。通配符配置
		<action name="customer_*" class="com.qq986945193.davidsshtools.action.DemoCustomerAction1" method="{1}">
			配置返回结果
			<result name="success">/jsp/success.jsp</result>
			<result name="error">/jsp/error.jsp</result>
		</action>
	</package> -->
	
	<!-- action的配置拦截器以及完全解耦的方式.使用通配符的方式进行配置 -->
	<package name="introduceAction4" extends="struts-default" namespace="/">
			<!-- 配置全局的结果页面 全局的重定向-->
		<!-- <global-results>
			<result name="success" type="redirect">/struts2/jsps/success.jsp</result>
		</global-results>
		 -->
				
		<!-- 定义了一个拦截器。这是第一种方式 -->
		<!-- <interceptors>
			<interceptor name="IntroduceInterceptor1" class="com.qq986945193.davidsshtools.interceptor.IntroduceInterceptor1"/>
		</interceptors> -->
		<!-- 第二种方法，我们可以定义拦截器栈 -->
		<interceptors>
			<interceptor name="IntroduceInterceptor1" class="com.qq986945193.davidsshtools.interceptor.IntroduceInterceptor1"/>
			<!-- 定义一个拦截器栈 -->
			<interceptor-stack name="myStack">
				<interceptor-ref name="IntroduceInterceptor1"/>
				<interceptor-ref name="defaultStack"/>
			</interceptor-stack>
		</interceptors>
		<!-- 完全解耦和测试Servlet原生api的方式 -->
		<action name="introduce_*" class="com.qq986945193.davidsshtools.action.IntroduceAction4" method="{1}">
			<!-- <result name="success">/struts2/jsps/success.jsp</result> -->
		</action>
		<!-- 演示重定向action.不用在写后缀 -->
		<action name="introduceRedirect_*" class="com.qq986945193.davidsshtools.action.IntroduceAction4" method="{1}">
			<!-- <result name="success" type="redirectAction">introduceRedirect_fun4</result> -->
		</action>
		<!-- 演示获取到表单的数据，然后进行封装-->
		<action name="introduceformParameter_*" class="com.qq986945193.davidsshtools.action.IntroduceAction5" method="{1}">
		</action>

		<!-- 配置拦截器。这里访问是根据name，http://localhost/SSHTools/interceptorAction1.action 方法是内部调用的 -->
		<action name="interceptorAction1" class="com.qq986945193.davidsshtools.action.InterceptorAction1" method="testInterceptor">
			<!-- 引入我们自己的拦截器。由于引入了我们自己的拦截器，所以默认栈的拦截器就不起作用了。所以，我们要手动导入默认拦截器 -->
	<!-- 		<interceptor-ref name="IntroduceInterceptor1"></interceptor-ref> -->
			<!-- <interceptor-ref name="defaultStack"></interceptor-ref> -->
			<!-- 我们可以直接引入一个拦截器栈 -->
			<interceptor-ref name="myStack"/>
		</action>
	</package>
	<!-- 这是一个检测是否登陆的拦截器功能 interceptor-->
	<package name="loginInterceptor" extends="struts-default" namespace="/">
		<!-- 配置拦截器栈 -->
		<!-- <interceptors>
			<interceptor name="customerUserInterceptor1" class="com.qq986945193.davidsshtools.interceptor.CustomerUserInterceptor1"/>
			<interceptor-stack name="loginStack">
				<interceptor-ref name="customerUserInterceptor1"/>
				<interceptor-ref name="defaultStack"/>
			</interceptor-stack>
		</interceptors> -->
			<!-- 配置拦截器 -->
		<interceptors>
			<interceptor name="userInterceptor" class="com.qq986945193.davidsshtools.interceptor.CustomerUserInterceptor1"/>
		</interceptors>
		<!-- 配置全局的login -->
		<global-results>
			<result name="login">/struts2/demo/login.htm</result>
		</global-results>
		<!-- 配置用户的模块 -->
		<action name="user_*" class="com.qq986945193.davidsshtools.action.UserAction" method="{1}">
			<!-- 如果返回success 则说明登陆成功 -->
			<result name="success">/struts2/demo/index.htm</result>
			<!-- 由于拦截器进行了拦截，所以login方法不能拦截，不然全部永远也登录不上去了 -->
			<interceptor-ref name="userInterceptor">
				<!-- login方法不拦截 -->
				<param name="excludeMethods">login</param>
			</interceptor-ref>
			<!-- 开启默认的拦截 -->
			<interceptor-ref name="defaultStack"/>
		</action>
		
		<!-- 客户的模块 -->
		<action name="customer_*" class = "com.qq986945193.davidsshtools.action.CustomerAction1" method="{1}">
			<!-- 引入拦截器 -->
			<interceptor-ref name="userInterceptor"/>
			<interceptor-ref name="defaultStack"/>
		</action>
		
		<!-- 演示值栈的功能，数据存取 -->
		<action name="vs_*" class = "com.qq986945193.davidsshtools.action.ValueStackAction" method="{1}">
		<!-- 引入拦截器 -->
			<interceptor-ref name="userInterceptor"/>
			<interceptor-ref name="defaultStack"/>
			<result name="ognlsuccess">/jsp/ognlsuccess.jsp</result>
			</action>
			
	</package>
	
</struts>













